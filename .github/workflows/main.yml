name: test run for trivy with encryption txt file

on:
  push:
    branches:
      - main

jobs:

  BuildImage-PushToHub-Deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract Git SHA
        id: vars
        run: echo "GIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        id: docker_build
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} .

      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

      - name: Scan Docker image with Trivy
        id: trivy_scan
        run: |
          trivy image --severity HIGH,CRITICAL --no-progress ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} > trivy_report.txt
          cat trivy_report.txt
          trivy image --severity HIGH,CRITICAL --format json --no-progress ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} > trivy_report.json
          cat trivy_report.json

      - name: Send Trivy Report to Slack
        if: success()
        run: |
          # Parse JSON output to count vulnerabilities
          total_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy_report.json)
          high_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH")] | length' trivy_report.json)
          critical_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' trivy_report.json)
    
          # Create a summary message
          msg=$(printf "The Trivy scan completed with the following results:\n\n*Total Vulnerabilities: %s*\n*High Vulnerabilities: %s*\n*Critical Vulnerabilities: %s*" "$total_vulns" "$high_vulns" "$critical_vulns\n\nCreating full report ...")
  
          # Send message to Slack channel using webhook
          payload=$(jq -n --arg msg "$msg" '{text: "*Trivy Scan Report:*\n\n\($msg)"}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL_ALERTS }}

     

      # Encrypt the Trivy report with zip
      - name: Encrypt Trivy Report
        run: |
          password=$(openssl rand -base64 12)
          zip -e -P "$password" trivy_report.zip trivy_report.txt
          echo "PASSWORD=$password" >> $GITHUB_ENV

      # Upload the encrypted file to Dropbox
      - name: Upload Encrypted Trivy Report to Dropbox
        run: |
          
          # Set variables
          access_token="${{ secrets.DROPBOX_ACCESS_TOKEN }}"
          file_path="trivy_report.zip"
          dropbox_path="/trivy_report.zip"

          echo "Uploading file to Dropbox..."

          # Upload the file to Dropbox
          upload_response=$(curl -X POST https://content.dropboxapi.com/2/files/upload \
            --header "Authorization: Bearer $access_token" \
            --header "Dropbox-API-Arg: {\"path\": \"$dropbox_path\",\"mode\": \"overwrite\",\"autorename\": true,\"mute\": false}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @$file_path)
    
          echo "Dropbox Upload Response: $upload_response"

          # Confirm that the file was uploaded to the correct path
          echo "File should be uploaded to: $dropbox_path"
  
          # Check if a shared link already exists
          link_response=$(curl -X POST https://api.dropboxapi.com/2/sharing/list_shared_links \
            --header "Authorization: Bearer $access_token" \
            --header "Content-Type: application/json" \
            --data "{\"path\": \"$dropbox_path\",\"direct_only\": true}")

          existing_link=$(echo $link_response | jq -r '.links[0].url')

          if [ "$existing_link" = "null" ]; then
            # No existing link, create a new one
            echo "Creating a new shareable link..."
            link_response=$(curl -X POST https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings \
              --header "Authorization: Bearer $access_token" \
              --header "Content-Type: application/json" \
              --data "{\"path\": \"$dropbox_path\"}")
            link=$(echo $link_response | jq -r '.url')
          else
            # Use the existing link
            echo "Using existing shared link..."
            link=$existing_link
           fi

          echo "Dropbox Shared Link: $link"

          # Save the link as an environment variable for later steps
          echo "LINK=$link" >> $GITHUB_ENV

      - name: Notify Slack
        if: success()
        run: |
          echo "Preparing to send message to Slack..."
          # Get the Dropbox link from the environment variable
          link="${{ env.LINK }}"
          password="${{ env.PASSWORD }}"

    
          # Construct the message payload
          payload=$(jq -n --arg link "$link" --arg password "$password" '{text: "The encrypted Trivy scan report is available <\($link)|here>.\nPassword: \($password)\n*REPORT FORMATS BETTER IF OPEN IN ANY BROWSER OR VSCODE*"}')
    
          # Debug output for payload
          echo "Slack Payload: $payload"
          # Send the message to Slack
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL_ALERTS }}
          echo "Message sent to Slack."
