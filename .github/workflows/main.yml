name: Scan, Build Image, Push, and Update Image Name

on:
  push:
    branches:
      - main

jobs:

  NotifyWorkflowStart:
    runs-on: ubuntu-latest
    steps:
      - name: Notify Start
        run: |
          payload=$(jq -n --arg msg "The APD_ADMIN merge succesfull, starting git action..." \
          '{text: "*Workflow Notification:*\n\n\($msg)"}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL_ALERTS }}

  #######################################################        
  SonarScan:
    runs-on: ubuntu-latest
    needs: NotifyWorkflowStart
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
        

      - name: Post SonarQube Analysis Report to Commit
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        run: |
          REPORT_URL="${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ github.repository }}:${{ github.sha }}"
          COMMENT_BODY="### SonarQube Analysis Report\n\n[View the full report here](${REPORT_URL})"
          COMMENT_BODY=$(echo -e "$COMMENT_BODY")
          gh api repos/${{ github.repository }}/commits/${{ github.sha }}/comments -f body="$COMMENT_BODY"


      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Send SonarQube analysis to Slack
        if: always()
        run: |
          project_key="APD_ADMIN"
          sonar_host="${{ secrets.SONAR_HOST_URL }}"
          sonar_token="${{ secrets.SONAR_TOKEN }}"

          # Fetch Quality Gate Status
          quality_gate_status=$(curl -s -u $sonar_token: $sonar_host/api/qualitygates/project_status?projectKey=$project_key | jq -r '.projectStatus.status')
          

          # Replace "ERROR" with "failed"
          if [ "$quality_gate_status" == "ERROR" ]; then
          quality_gate_status="FAILED"
          
          fi

          echo "Quality Gate Status: $quality_gate_status"

          # Log raw API response (test)
          echo "Fetching raw API response for coverage..."
          curl -s -u $sonar_token: $sonar_host/api/measures/component?component=$project_key\&metricKeys=coverage

          # Fetch Security Metric (test token permission)
          security_rating=$(curl -s -u $sonar_token: $sonar_host/api/measures/component?component=$project_key\&metricKeys=security_rating | jq .)
          echo "Raw Security Metric API Response: $security_rating"

          # Fetch individual metrics
          metrics=("duplicated_lines_density" "reliability_rating" "security_rating" "violations" "new_violations" "code_smells" "vulnerabilities" "security_hotspots_reviewed")
          results=()


         
          #test log to find correct metrics
          echo "Fetching raw API response for hotspots..."
          curl -s -u $sonar_token: $sonar_host/api/measures/component?component=$project_key\&metricKeys=security_hotspots_reviewed


          


          for metric in "${metrics[@]}"; do
            result=$(curl -s -u $sonar_token: $sonar_host/api/measures/component?component=$project_key\&metricKeys=$metric | jq -r '.component.measures[0].value // "0"')

            # If the result is empty or null, set it to "0"
            if [ -z "$result" ] || [ "$result" == "null" ]; then
              result="0"
            fi

            echo "$metric: $result"
            results+=("$result")
          done

          # coverage="${results[0]}" (should add this in the "Fetch individual metrics and in the arg section below "--arg cov "$coverage"   above if required)
          duplication="${results[0]}"
          reliability="${results[1]}"
          security="${results[2]}"
          issues="${results[3]}"
          newissues="${results[4]}"
          Maintainability="${results[5]}"
          Vulnarability="${results[6]}"
          Hotspot="${results[7]}"

          # SonarQube report URL (created to use this in slack , in testing , can use this report_url if needed, add this in the arg below "--arg url "$report_url"")
          report_url="${sonar_host}/dashboard?id=${project_key}"

          # Construct the payload for Slack
          payload=$(jq -n --arg qgs "$quality_gate_status" --arg dup "$duplication" --arg rel "$reliability" --arg sec "$security" --arg iss "$issues" --arg nis "$newissues" --arg man "$Maintainability" --arg vul "$Vulnarability" --arg hs "$Hotspot" --arg link "$report_url" \
          '{
            text: "*Here is your APD_ADMIN SonarQube analysis report for the latest SQScan*:\n\n*Quality Gate Status: \($qgs)*\n\nDuplication: \($dup)%\nReliability rating: \($rel)\nSecurity rating: \($sec)\nIssues: \($iss)\nNew issues: \($nis)\nMaintainability (open issue): \($man)\nSecurity issues: \($vul)\nHotspots reviewed: \($hs)%\nThe ```APD_ADMIN``` Sonarqube report is available <\($link)|here>"
          }')

          # Send the payload to Slack
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL_ALERTS }}
