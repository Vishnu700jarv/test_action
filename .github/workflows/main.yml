name: test run for trivy with encryption txt file

on:
  push:
    branches:
      - main

jobs:

  BuildImage-PushToHub-Deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract Git SHA
        id: vars
        run: echo "GIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        id: docker_build
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} .

      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

      - name: Scan Docker image with Trivy
        id: trivy_scan
        run: |
          trivy image --severity HIGH,CRITICAL --no-progress ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} > trivy_report.txt
          cat trivy_report.txt
          trivy image --severity HIGH,CRITICAL --format json --no-progress ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} > trivy_report.json
          cat trivy_report.json



      - name: Create Trivy Report Gist
        id: create_gist
        run: |
          gist_content=$(cat trivy_report.txt)
          gist_data=$(jq -n --arg description "Trivy Report for Commit ${{ env.GIT_SHA }}" --arg content "$gist_content" \
          '{description: $description, public: false, files: {"trivy_report.txt": {content: $content}}}')
          
          gist_url=$(curl -X POST -H "Authorization: token ${{ secrets.G_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "$gist_data" \
          https://api.github.com/gists | jq -r '.html_url')
          
          echo "GIST_URL=$gist_url" >> $GITHUB_ENV

      


      - name: Comment on the Commit with Trivy Report
        run: |
          commit_sha="${{ env.GIT_SHA }}"
          gist_url="${{ env.GIST_URL }}"
          comment="Trivy scan report for this commit is available [here](${gist_url})."
          curl -X POST -H "Authorization: token ${{ secrets.G_TOKEN }}" \
               -d '{"body":"'"$comment"'"}' \
               https://api.github.com/repos/${{ github.repository }}/commits/${commit_sha}/comments

          

      - name: Send Trivy Report to Slack
        if: success()
        run: |
          # Parse JSON output to count vulnerabilities
          total_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy_report.json)
          high_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH")] | length' trivy_report.json)
          critical_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' trivy_report.json)
    
          # Create a summary message
          msg=$(printf "The APD_BE Trivy scan completed with the following results:\n\nTotal Vulnerabilities: %s\nHigh Vulnerabilities: %s\nCritical Vulnerabilities: %s" "$total_vulns" "$high_vulns" "$critical_vulns")
       
          # Send message to Slack channel using webhook
          payload=$(jq -n --arg msg "$msg" '{text: "*Trivy Scan Report:*\n\n\($msg)"}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL_ALERTS }}


      
