name: SQScan

on:
  push:
    branches:
      - main

jobs:
  SonarScan:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
      
      - name: Post SonarQube Analysis Report to Commit
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        run: |
          REPORT_URL="${{ secrets.SONAR_HOST_URL }}/dashboard?id=${{ github.repository }}:${{ github.sha }}"
          COMMENT_BODY="### SonarQube Analysis Report\n[View the full report here](${REPORT_URL})"
          gh api repos/${{ github.repository }}/commits/${{ github.sha }}/comments -f body="${COMMENT_BODY}"

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Send SonarQube analysis to Slack
        if: always()
        run: |
          project_key="testsq"
          sonar_host="${{ secrets.SONAR_HOST_URL }}"
          sonar_token="${{ secrets.SONAR_TOKEN }}"

          # Fetch Quality Gate Status
          quality_gate_status=$(curl -s -u $sonar_token: $sonar_host/api/qualitygates/project_status?projectKey=$project_key | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $quality_gate_status"

          # Log raw API response (test)
          echo "Fetching raw API response for coverage..."
          curl -s -u $sonar_token: $sonar_host/api/measures/component?component=$project_key\&metricKeys=coverage

          # Fetch Security Metric (test token permission)
          security_rating=$(curl -s -u $sonar_token: $sonar_host/api/measures/component?component=$project_key\&metricKeys=security_rating | jq .)
          echo "Raw Security Metric API Response: $security_rating"

          # Fetch individual metrics
          metrics=("duplicated_lines_density" "reliability_rating" "security_rating" "sqale_rating" "vulnerabilities")
          results=()

          for metric in "${metrics[@]}"; do
            result=$(curl -s -u $sonar_token: $sonar_host/api/measures/component?component=$project_key\&metricKeys=$metric | jq -r '.component.measures[0].value')
            echo "$metric: $result"
            results+=("$result")
          done

          # coverage="${results[0]}" (should add this in the "Fetch individual metrics above if required)
          duplication="${results[1]}"
          reliability="${results[2]}"
          security="${results[3]}"
          maintainability="${results[4]}"
          hotspots="${results[5]}"

          # SonarQube report URL
          report_url="${sonar_host}/dashboard?id=${project_key}"

          # Construct the payload for Slack
          payload=$(jq -n --arg qgs "$quality_gate_status" --arg cov "$coverage" --arg dup "$duplication" --arg rel "$reliability" --arg sec "$security" --arg main "$maintainability" --arg hs "$hotspots" --arg url "$report_url" \
          '{
            text: "Here is your SonarQube analysis report for the latest SQScan:\n*Quality Gate Status:* \($qgs)\n*Duplication:* \($dup)%\n*Reliability:* \($rel)\n*Security:* \($sec)\n*Maintainability:* \($main)\n*Hotspots Reviewed:* \($hs)\n<${url}|View Full Report>"
          }')

          # Send the payload to Slack
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL }}
