name: test run for trivy

on:
  push:
    branches:
      - main

jobs:

  BuildImage-PushToHub-Deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Extract Git SHA
        id: vars
        run: echo "GIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        id: docker_build
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} .

      - name: Install Trivy
        run: |
          sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

      - name: Scan Docker image with Trivy
        id: trivy_scan
        run: |
          trivy image --severity HIGH,CRITICAL --no-progress ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} > trivy_report.txt
          cat trivy_report.txt
          trivy image --severity HIGH,CRITICAL --format json --no-progress ${{ secrets.DOCKER_HUB_USERNAME }}/apd:${{ env.GIT_SHA }} > trivy_report.json
          cat trivy_report.json

      - name: Send Trivy Report to Slack
        if: success()
        run: |
          # Parse JSON output to count vulnerabilities
          total_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' trivy_report.json)
          high_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH")] | length' trivy_report.json)
          critical_vulns=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' trivy_report.json)
          
          # Create a summary message
          msg=$(printf "The Trivy scan completed with the following results:\n\n*Total Vulnerabilities: %s*\n*High Vulnerabilities: %s*\n*Critical Vulnerabilities: %s*" "$total_vulns" "$high_vulns" "$critical_vulns")
    
          # Send message to Slack channel using webhook
          payload=$(jq -n --arg msg "$msg" '{text: "*Trivy Scan Report:*\n\n\($msg)"}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL_ALERTS }}

          
          
          
      - name: Convert Trivy Report to Slack Attachment
        id: convert_report
        run: |
          # Read the content of the Trivy report
          report_content=$(cat trivy_report.txt | head -n 20) # Limit to the first 20 lines for brevity

          # Format the content for Slack
          payload=$(jq -n --arg content "$report_content" '{
            "attachments": [
              {
                "fallback": "Trivy Scan Report",
                "color": "#36a64f",
                "title": "Trivy Scan Report",
                "text": $content
              }
            ]
          }')

          # Save the payload to a file
          echo "$payload" > slack_payload.json

      - name: Send Report to Slack
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data @slack_payload.json ${{ secrets.SLACK_WEBHOOK_URL_ALERTS }}

